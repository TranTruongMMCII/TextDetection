# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
# 
# Code by TranTruongMMCII
# 
# Ánh trăng hôm nay thật đẹp.
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import PyQt5
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import os
import sys
import tkinter as tk
from tkinter import filedialog
try:
    from PIL import Image
except ImportError:
    import Image
import pytesseract as pt
from PyPDF2 import PdfFileReader
import PyPDF2
import pyperclip
import ntpath
import subprocess
import fitz
import io
import cv2

path_to_pytesseract = r'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'
saving_directory = r"D:\\College\\Artificial Intelligence\\New folder\\Text Detection\\Save"
saving_image = r"D:\\College\\Artificial Intelligence\\New folder\\Text Detection\\Image"
global res

def path_leaf(path):
    head, tail = ntpath.split(path)
    return tail or ntpath.basename(head)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1221, 873)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 1221, 871))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(23)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        font.setPointSize(14)
        self.txtTextResult = QtWidgets.QPlainTextEdit(self.verticalLayoutWidget)
        self.txtTextResult.setFont(font)
        self.txtTextResult.setObjectName("txtTextResult")
        self.verticalLayout.addWidget(self.txtTextResult)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.btnTaiHinhAnh = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btnTaiHinhAnh.setObjectName("btnTaiHinhAnh")
        self.horizontalLayout_2.addWidget(self.btnTaiHinhAnh)
        self.btnChuyenDoi = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btnChuyenDoi.setObjectName("btnChuyenDoi")
        self.horizontalLayout_2.addWidget(self.btnChuyenDoi)
        self.btnTrichXuatHinhAnh = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btnTrichXuatHinhAnh.setObjectName("btnTrichXuatHinhAnh")
        self.horizontalLayout_2.addWidget(self.btnTrichXuatHinhAnh)
        self.btnCopy = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btnCopy.setObjectName("btnCopy")
        self.horizontalLayout_2.addWidget(self.btnCopy)
        self.btnLuu = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btnLuu.setObjectName("btnLuu")
        self.horizontalLayout_2.addWidget(self.btnLuu)
        self.btnThoat = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btnThoat.setObjectName("btnThoat")
        self.horizontalLayout_2.addWidget(self.btnThoat)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.btnThoat.clicked.connect(self.closeWindow)
        self.btnTaiHinhAnh.clicked.connect(self.loadFile)
        self.btnChuyenDoi.clicked.connect(self.handle_file)
        self.btnCopy.clicked.connect(self.copy_file)
        self.btnLuu.clicked.connect(self.save_file)
        self.btnTrichXuatHinhAnh.clicked.connect(self.getImageFromPDF)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Chương trình nhận diện văn bản từ hình ảnh"))
        self.label.setText(_translate("MainWindow", "Chương trình nhận diện văn bản từ hình ảnh"))
        self.btnTaiHinhAnh.setText(_translate("MainWindow", "Tải dữ liệu"))
        self.btnChuyenDoi.setText(_translate("MainWindow", "Trích xuất văn bản"))
        self.btnTrichXuatHinhAnh.setText(_translate("MainWindow", "Trích xuất hình ảnh"))
        self.btnCopy.setText(_translate("MainWindow", "Copy to clipboard"))
        self.btnLuu.setText(_translate("MainWindow", "Lưu"))
        self.btnThoat.setText(_translate("MainWindow", "Thoát"))

    def closeWindow(self):
        os._exit(0)
    
    def loadFile(self):
        root = tk.Tk()
        root.withdraw()
        global file_path
        file_path = filedialog.askopenfilename(initialdir = "/",title = "Select file",filetypes = (("pdf files","*.pdf"), ("jpeg files","*.jpg"), ("png files","*.png"), ("all files","*.*")))
        subprocess.Popen([file_path], shell=True)
        # self.a = QtWidgets.QApplication([])
        # self.pdf = pikepdf.open(file_path)
        # pikepdf.PdfImage.show(self.pdf)
    
    def handle_file_pdf(self, file_path):
        # pdf = PdfFileReader(file_path)
        # res = ""
        # for page_num in range(pdf.numPages):
        #     print("Page: {0}".format(page_num))
        #     pageObj = pdf.getPage(page_num)

        #     try:
        #         txt = pageObj.extractText()
        #         temp = ""
        #         for word in txt.split(' '):
                   
        #             if '™' in word:
        #                 word = word.replace('™','\'')
        #             if 'ﬁ' in word:
        #                 word = word.replace('ﬁ','')
        #             # if word[0].isdigit():
        #             #     word = "\n" + word
                        
        #             temp += word + " "
        #         txt = temp        
           
        #         # print(''.center(100, '-'))
        #     except:
        #         pass
        #     else:
        #         res += txt
        # pyperclip.copy(res)
        # return res

        file = fitz.open(file_path)

        res = ""

        for pageNumber, page in enumerate(file.pages(), start=1):
            res += "Trang " + str(pageNumber) + "\n"
            text = page.getText()
            res += text + "\n"
        
        return res
    
    def handle_file_image(self, file_path):
        res = ""
        pt.pytesseract.tesseract_cmd = path_to_pytesseract
        res = pt.image_to_string(Image.open(file_path))
        pyperclip.copy(res)
        return res

    def getImageFromPDF(self):
        # pdf_file = fitz.open(file_path)
        # for page_index in range(len(pdf_file)):
        # # get the page itself
        #     page = pdf_file[page_index]
        #     image_list = page.getImageList()
        #     # printing number of images found in this page
        #     if image_list:
        #         print(f"[+] Found a total of {len(image_list)} images in page {page_index}")
        #     else:
        #         print("[!] No images found on page", page_index)
        #     for image_index, img in enumerate(page.getImageList(), start=1):
        #         # get the XREF of the image
        #         xref = img[0]
        #         # extract the image bytes
        #         base_image = pdf_file.extractImage(xref)
        #         image_bytes = base_image["image"]
        #         # get the image extension
        #         image_ext = base_image["ext"]
        #         # load it to PIL
        #         image = Image.open(io.BytesIO(image_bytes))
        #         # save it to local disk
        #         image.save(open(saving_image + "\\" + f"image{page_index+1}_{image_index}.{image_ext}", "wb"))


        doc = fitz.open(file_path)
        for i in range(len(doc)):
            for img in doc.getPageImageList(i):
                xref = img[0]
                pix = fitz.Pixmap(doc, xref)
                if pix.n < 5:       # this is GRAY or RGB
                    pix.writePNG(saving_image + "\\" + f"p%s-%s.png" % (i, xref))
                else:               # CMYK: convert to RGB first
                    pix1 = fitz.Pixmap(fitz.csRGB, pix)
                    pix1.writePNG(saving_image + "\\" + f"p%s-%s.png" % (i, xref))
                    pix1 = None
                pix = None

        # input1 = PyPDF2.PdfFileReader(open(file_path, "rb"))
        # page0 = input1.getPage(0)
        # xObject = page0['/Resources']['/XObject'].getObject()

        # for obj in xObject:
        #     if xObject[obj]['/Subtype'] == '/Image':
        #         size = (xObject[obj]['/Width'], xObject[obj]['/Height'])
        #         data = xObject[obj].getData()
        #         if xObject[obj]['/ColorSpace'] == '/DeviceRGB':
        #             mode = "RGB"
        #         else:
        #             mode = "P"

        #         if xObject[obj]['/Filter'] == '/FlateDecode':
        #             img = Image.frombytes(mode, size, data)
        #             img.save(saving_image +"\\" + obj[1:] + ".png")
        #         elif xObject[obj]['/Filter'] == '/DCTDecode':
        #             img = open(saving_image +"\\" + obj[1:] + ".jpg", "wb")
        #             img.write(data)
        #             img.close()
        #         elif xObject[obj]['/Filter'] == '/JPXDecode':
        #             img = open(saving_image +"\\" + obj[1:] + ".jp2", "wb")
        #             img.write(data)
        #             img.close()

    def handle_file(self):
        _translate = QtCore.QCoreApplication.translate  
        self.txtTextResult.clear()
        if(".pdf" in file_path):
            self.txtTextResult.setPlainText(_translate("MainWindow", self.handle_file_pdf(file_path)))
        else:
            self.txtTextResult.setPlainText(_translate("MainWindow", self.handle_file_image(file_path)))

    def copy_file(self):
        msg = QMessageBox()
        msg.setWindowTitle("Thông tin")
        msg.setText("Đã sao chép vào khay nhớ tạm.")
        msg.setIcon(QMessageBox.Information)
        msg.setStandardButtons(QMessageBox.Ok)
        x = msg.exec_()
    
    def save_file(self):
        saving_path = saving_directory + "\\detect_" + path_leaf(file_path) + ".txt"
        with(open(saving_path, 'w', encoding='utf-8')) as f:
            f.write(self.txtTextResult.toPlainText())
            
            msg = QMessageBox()
            msg.setWindowTitle("Thông tin")
            msg.setText("Đã lưu văn bản ở {0}.".format(saving_path))
            msg.setIcon(QMessageBox.Information)
            msg.setStandardButtons(QMessageBox.Ok)
            x = msg.exec_()

        f.close()


if __name__ == '__main__':
    global app
    app = QtWidgets.QApplication(sys.argv)
    app.setStyle("Fusion")
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show() 
    sys.exit(app.exec_())